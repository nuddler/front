{{#imports}}
    /// <reference path="{{&.}}" />
{{/imports}}

import * as request from "superagent";
import {SuperAgentStatic} from "superagent";

export type SuperAgentResponse = request.Response;
export type SuperAgentCallbackHandler = (err: any, res?: SuperAgentResponse) => void;

{{#definitions}}
    export interface {{&name}} {{#tsType}}{{> type}}{{/tsType}}
{{/definitions}}

type Logger = { log: (line: string) => any };

/**
* {{&description}}
* @class {{&className}}
* @param {(string)} [domainOrOptions] - The project domain.
*/
export class {{&className}} {

private domain: string = "{{&domain}}";
private errorHandlers: SuperAgentCallbackHandler[] = [];
private headers = {};

constructor(domain?: string, private logger?: Logger, headers?: {}) {


if(domain) {
this.domain = domain;
}

if(logger) {
this.logger = logger;
}

if (headers) {
this.headers = headers;
}

}

getDomain() {
return this.domain;
}

addErrorHandler(handler: SuperAgentCallbackHandler) {
this.errorHandlers.push(handler);
}

private request(method: string, url: string, body: any, headers: any, queryParameters: any, form: any, reject: SuperAgentCallbackHandler, resolve: SuperAgentCallbackHandler) {
if(this.logger) {
this.logger.log(`Call ${method} ${url}`);
}

let req = (request as SuperAgentStatic)(method, url).query(queryParameters).withCredentials();

Object.keys(Object.assign(headers, this.headers)).forEach(key => {
req.set(key, headers[key]);
});

if(body) {
req.send(body);
}

if(typeof(body) === 'object' && !(body.constructor.name === 'Buffer')) {
req.set('Content-Type', 'application/json');
}

if(Object.keys(form).length > 0) {
req.type('form');
req.send(form);
}

req.end((error, response) => {
if(error || !response.ok) {
if(response && response.body && response.body.message) {
reject(response);
} else {
reject(error);
}
this.errorHandlers.forEach(handler => handler(error, response));
} else {
resolve(response);
}
});
}

{{#methods}}
    {{> method}}

{{/methods}}
}